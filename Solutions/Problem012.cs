namespace ProjectEuler.Solutions
{
	using System.Collections.Generic;
	using NUnit.Framework;

	/// <summary>
	/// Highly divisible triangular number.
	/// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	/// <para>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</para>
	/// Let us list the factors of the first seven triangle numbers:
	/// <para>
	///  1: 1
	///  3: 1,3
	///  6: 1,2,3,6
	/// 10: 1,2,5,10
	/// 15: 1,3,5,15
	/// 21: 1,3,7,21
	/// 28: 1,2,4,7,14,28
	/// </para>
	/// We can see that 28 is the first triangle number to have over five divisors.
	/// <para>What is the value of the first triangle number to have over five hundred divisors?</para>
	/// </summary>
	public class Problem012 : Problem
	{
		public override long Solution()
		{
			return FirstTriangleNumberWithAmountDivisors(500);
		}

		private static long FirstTriangleNumberWithAmountDivisors(int targetAmountDivisors)
		{
			long triangleNumber = 0;
			for (long i = 1;; i++)
			{
				triangleNumber += i;
				int amountDivisors = GetAmountDivisors(triangleNumber);
				if (amountDivisors >= targetAmountDivisors)
				{
					break;
				}
			}

			return triangleNumber;
		}

		private static int GetAmountDivisors(long number)
		{
			IEnumerator<long> primeFactors = Problem003.GetPrimeFactors(number)
				.GetEnumerator();

			int amountDivisors = 0;
			if(primeFactors.MoveNext())
			{
				amountDivisors++;

				int amountCurrentFactors = 1;
				long currentFactor = primeFactors.Current;
				while(primeFactors.MoveNext())
				{
					long primeFactor = primeFactors.Current;
					if(primeFactor == currentFactor)
					{
						amountCurrentFactors++;
					}
					else
					{
						amountDivisors *= amountCurrentFactors + 1;
						amountCurrentFactors = 1;
						currentFactor = primeFactor;
					}
				}

				amountDivisors *= amountCurrentFactors + 1;
			}

			return amountDivisors;
		}

		[Test]
		public void TestForExample()
		{
			long triangleNumber = FirstTriangleNumberWithAmountDivisors(5);

			Assert.AreEqual(28, triangleNumber);
		}

		[Test]
		public void TestForProblem()
		{
			Assert.AreEqual(76576500, this.Solution());
		}
	}
}